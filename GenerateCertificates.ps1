<#
.SYNOPSIS
	This script is used to deploy certificates on a server requested to the internal certification authority.
.DESCRIPTION
	Following a number of requests by Michel Laforge, DBA in the Canadian Infrastructure team, the initial
	intention of this script was to provide an easy, consistent and error free creation method of certificates
	used by SQL Enhanced Always On Availability Groups. 
	
	Essentially, the certificate used by SQL needed to have the CERT_KEY_ENCIPHERMENT_KEY_USAGE Key Usage set
	in the INF so it can use the key to encrypt data sent to other members of the availability group.
	
	However, the script can be used to create other certificate type as it provides a way to specify/manipulate
	the INF file content the certificate configuration used in the request to the Certification Authority.
	
	Initialy meant to be run directly off the CA server, it can run anywhere given the running account has
	the rights to request and approve a certificate request from the specified template and, optionaly, has
	sufficients rights to the target host to access the host thru CIFS and export the certificate to it's store.
.PARAMETER Computer
	Required parameter. Name of the computer. Will me used to construct the subject of the certificate.
.PARAMETER SAN
	Comma separated Subject Alternate Name(s) to include in the request.
.PARAMETER Password
	Password of the PFX export. Not important if you choose to install the certificate thru the script.
.PARAMETER WorkDir
	Path where all files generated by this script will be written. Default is c:\ops\requests.
.PARAMETER CAConfig
	Path to the Certificate Authority which include the server name running the CA and the name of the CA.
.PARAMETER DNSSuffix
	Suffix used to create Fully Qualified Domain Name using the Computer Name and SANs (if defined.) Default is corp.pbwan.net.
.PARAMETER Template
	CA Template to use for the certificate creation. Default is SQLServer.
.PARAMETER Town
	Town where the certificate will me used. Default is Montreal.
.PARAMETER Province
	State or province where the certificate will me used. Default is Quebec.
.PARAMETER PFXOutFile
	File name for the PFX file to be exported. Not important if you choose to install the certificate thru the script. Default is [Computer].pfx.
.PARAMETER CertRequestINF
	Full path of the INF file used to request the certificate to the CA. Default is [WorkDir]\[Computer].inf
.OUTPUTS
	- [WorkDir]\[Computer].inf - Certificate configuration. Created by this script.
	- [WorkDir]\[Computer].req - Certificate request - Output obtained using CertReq.exe from the INF.
	- [WorkDir]\[Computer].cer - Certificate - Output obtained using CertReq.exe from the request file.
	- [WorkDir]\[Computer].pfx - Certificate export with the certificate path and private key. Protected by a password. - Output obtained using CertUtil.exe.
.NOTES
	Author:	Martin Thomas
	Requestor/Contibutor/Awesome DBA:	Michel Laforge
	Creation Date:	13th of December 2016
	Purpose/Change:	Initial script development.
.REVISIONS
	2017/08/12 - Martin Thomas - Added this header. Added a step to enable the user to modify the INF before proceeding with the certificate request. Corrected a typo that caused a bug in the certificate removal from the local store.
	2017/06/21 - Martin Thomas - Corrected layout of output, corrected typos and forced the encoding to ASCII for the INF file.
	2017/06/20 - Martin Thomas - Added ability to specify Subject Alternate Names.
	2017/03/21 - Martin Thomas - Corrected a few typos and bug. Added the ability to cleanup certificate from local store after export.
	2017/01/16 - Martin Thomas - Added ability to export the certificate directly to the host certificate store.
	2016/12/14 - Martin Thomas - Initial Script Released.
.EXAMPLE
	.\GenerateCertificates.ps1 -Computer dccan100sql98
.EXAMPLE
	.\GenerateCertificates.ps1 -Computer dccan100sql67 -SAN NewService-CA,TestSAN
.EXAMPLE
	.\GenerateCertificates.ps1 -Computer dccan100sql08t -Template NewWebServerTemplate
.EXAMPLE
	.\GenerateCertificates.ps1 -Computer dccan500sql79 -Town Airdrie -Province Alberta
.TODO
	- Enable the ability to manipulate the security on the host imported certificate to set the service account with full rights on the certificate.
	- Create a better way to contruct the INF on the fly and provide a way to select the Key Usages and other interestingsting parameters of the INF.
.REFERENCE
	SQL Server network encryption - https://brucedyoung.com/techtips/sql-server
#>

[Cmdletbinding()]
Param(
	[Parameter(Mandatory=$True)][String]$Computer = $(throw "-Computer is required."),
    [String[]]$SAN,
	[String]$Password = 'WSPGroup2016',
	[String]$WorkDir = 'c:\ops\requests',
	[String]$CAConfig = 'ennycica01.corp.pbwan.net\Parsons Brinckerhoff Production Issuing CA 1 R1',
	[String]$DNSSuffix = 'corp.pbwan.net',
	[String]$Template = 'SQLServer',
	[String]$Town = 'Montreal',
	[String]$Province = 'Quebec',
	[String]$PFXOutFile = "$Computer.pfx",
	[String]$CertRequestINF = "$WorkDir\$Computer.inf"
)

if (-NOT([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "Administrator priviliges are required. Please restart this script with elevated rights." -ForegroundColor Red
    Throw "Administrator priviliges are required. Please restart this script with elevated rights."
}

<#
Write-Host "Computer: $Computer"
Write-Host "SAN: $SAN"
Write-Host "Password: $Password"
Write-Host "WorkDir: $WorkDir"
Write-Host "CAConfig: $CAConfig"
Write-Host "DNSSuffix: $DNSSuffix"
Write-Host "Template: $Template"
Write-Host "Town: $Town"
Write-Host "Province: $Province"
Write-Host "PFXOutFile: $PFXOutFile"
Write-Host "CertRequestINF: $CertRequestINF"
#>

Write-Host "`nGenerating certificate for: $Computer.$DNSSuffix located in $town, $province."
Write-Host "`nWork Directory: $WorkDir"
Write-Host "Certificate CA: $CAConfig"
Write-Host "Certificate Template: $Template"
Write-Host "Output File: $PFXOutFile"
Write-Host "PFX Password: $Password"
	
if(-Not(Test-Path -Path $WorkDir -PathType Container)) {
Write-Host "`n$WorkDir does not exist. Creating."
New-Item -Path $WorkDir -ItemType Directory -ErrorAction Stop
}

if(-Not(Test-Path -Path \\$Computer.$DNSSuffix\c$\ops -PathType Container)){
Write-Host "`n\\$Computer.$DNSSuffix\c$\ops does not exist. Creating."
try {New-Item -Path \\$Computer.$DNSSuffix\c$\ops -ItemType Directory -ErrorAction Stop}
catch {Write-Output "Could not create remote folder: $($error[0].exception.message)"}
}

Write-Host "`nCreating $WorkDir\$Computer.inf using this content:`n"
Remove-Item $WorkDir\$Computer.inf -ErrorAction SilentlyContinue

@"
[Version]
Signature="$Windows NT$"

[NewRequest]
Subject = "CN=$Computer.$DNSSuffix,OU=Global - IT Group Operations,O=WSP Group Limited,L=$Town,S=$Province,C=CA,E=GLOBAL-ITGroupOperationsTeam@WSPGroup.com"
KeyLength = 2048
Exportable = TRUE
MachineKeySet = TRUE
FriendlyName = $Computer
KeySpec = 1
KeyUsage = CERT_KEY_ENCIPHERMENT_KEY_USAGE

[RequestAttributes] 
CertificateTemplate = $Template
	
[EnhancedKeyUsageExtension]
OID = 1.3.6.1.5.5.7.3.1
"@ | Out-File -FilePath "$WorkDir\$Computer.inf" -Encoding ASCII

if ($SAN) {
[System.IO.File]::AppendAllText("$WorkDir\$Computer.inf",@"

[Extensions] 
2.5.29.17 = "{text}"
_continue_ = "dns=$Computer.$DNSSuffix
"@,[System.Text.Encoding]::ASCII)

foreach ($SANs in $SAN) {

$text = -join([char]38, [char]34, [char]13, [char]10, "_continue_ = ", [char]34, "dns=$SANs.$DNSSuffix")

[System.IO.File]::AppendAllText("$WorkDir\$Computer.inf",$text,[System.Text.Encoding]::ASCII)
}

[System.IO.File]::AppendAllText("$WorkDir\$Computer.inf",[char]34,[System.Text.Encoding]::ASCII)
}

Get-Content $WorkDir\$Computer.inf

$title = "Confirm Certificate Creation"
$message = "Proceed with certificate request for $Computer.$DNSSuffix? Please validate all sections of the subject string before proceeding. If necessary, you can edit the INF at this stage."
$yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes"
$no = New-Object System.Management.Automation.Host.ChoiceDescription "&No"
$options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)
$result = $host.ui.PromptForChoice($title, $message, $options, 1) 
if ($result -gt 0) {exit}

Write-Host "`nWriting request to $WorkDir\$Computer.req"
Remove-Item $WorkDir\$Computer.req -ErrorAction SilentlyContinue
(& certreq -new $CertRequestINF "$WorkDir\$Computer.req")

Write-Host "`nSubmitting request for $Computer to $CAConfig using $WorkDir\$Computer.req and writing to $WorkDir\$Computer.cer"
Remove-Item $WorkDir\$Computer.cer -ErrorAction SilentlyContinue
(& certreq -submit -config "$CAConfig" "$WorkDir\$Computer.req" "$WorkDir\$Computer.cer")
Write-Host "Accepting request for $WorkDir\$Computer.cer"
(& certreq -accept "$WorkDir\$Computer.cer")

Write-Host "Exporting certificate to $WorkDir\$PFXOutFile with private key."
(& certutil -p $Password -exportPFX "$Computer.$DNSSuffix" "$WorkDir\$PFXOutFile")

$title = "Copy certificate to remote host"
$message = "Should we copy the certificate for $Computer.$DNSSuffix to \\$Computer.$DNSSuffix\c$\ops?"
$yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes"
$no = New-Object System.Management.Automation.Host.ChoiceDescription "&No"
$options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)
$result = $host.ui.PromptForChoice($title, $message, $options, 1) 
if ($result -eq 0) {
	Write-Host "`nCopying $WorkDir\$PFXOutFile to \\$Computer.$DNSSuffix\c$\ops"
	Copy-Item -Path $WorkDir\$PFXOutFile -Destination \\$Computer.$DNSSuffix\c$\ops
}

$title = "Import certificate to remote host computer store"
$message = "Should import the certificate for $Computer.$DNSSuffix to it's computer store?"
$yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes"
$no = New-Object System.Management.Automation.Host.ChoiceDescription "&No"
$options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)
$result = $host.ui.PromptForChoice($title, $message, $options, 1) 
if ($result -eq 0) {
	Write-Host "`nImporting $WorkDir\$PFXOutFile to $Computer.$DNSSuffix computer store."
	Copy-Item -Path $WorkDir\$PFXOutFile -Destination \\$Computer.$DNSSuffix\c$\ops
	$CertPath = "c:\ops\$PFXOutFile"
	Invoke-Command -ComputerName $Computer -ScriptBlock {
		param(
			[Parameter(Mandatory=$true)][String]$Password,
			[Parameter(Mandatory=$true)][String]$CertPath
			)
		[String]$certRootStore = "localmachine"
		[String]$certStore = "My"
		$pfxPass = ConvertTo-SecureString $Password -AsPlainText -Force
		$pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2 
		$pfx.import($CertPath,$pfxPass,"Exportable,PersistKeySet") 
		$store = new-object System.Security.Cryptography.X509Certificates.X509Store($certStore,$certRootStore) 
		$store.open("MaxAllowed") 
		$store.add($pfx) 
		$store.close() 
	} -ArgumentList $Password, $CertPath
}

$title = "Remove Certificate from local computer store"
$message = "Should we delete the certificate for $Computer.$DNSSuffix in the local computer store?"
$yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes"
$no = New-Object System.Management.Automation.Host.ChoiceDescription "&No"
$options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)
$result = $host.ui.PromptForChoice($title, $message, $options, 1) 
if ($result -eq 0) {
	Write-Host "Deleting certificate from local computer store."
	(& certutil -privatekey -delstore 'MY' "$Computer.$DNSSuffix")
}

Write-Host "`nConsider archiving or deleting work files $Computer.* under $WorkDir."